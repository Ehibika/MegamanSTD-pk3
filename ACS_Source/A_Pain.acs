/* -=- Paintype Records -=-
 * storage and reference of data related to painstates, 
 *
 * 

*/
#library "A_Pain"
#include "zcommon.acs"

#LIBDEFINE PAINCOUNT 42

//Element Bitflags
#LIBDEFINE ELM_NULL 0.0
#LIBDEFINE ELM_FIRE 1.0
#LIBDEFINE ELM_ICE 2.0
#LIBDEFINE ELM_AQUA 4.0
#LIBDEFINE ELM_TOXIC 8.0
#LIBDEFINE ELM_ELEC 16.0
#LIBDEFINE ELM_WIND 32.0
#LIBDEFINE ELM_BREAK	64.0
#LIBDEFINE ELM_EUCLID 128.0
#LIBDEFINE ELM_BLADE 256.0 //just in case
#LIBDEFINE ELM_EXPLOSION 512.0
#LIBDEFINE ELM_DONTSTOP 1024.0

str PainRecord[PAINCOUNT][2] = {
/*
 * This contains all info regarding damagetypes with an element attached to them. anything without an element is assumed to be
 * Null.

*/
//    DamageTypeName, DamageTypeElement/Flags,  
/*0*/{"GasEmitter",ELM_TOXIC},
/*1*/{"CompressedSpray",ELM_WIND},
/*2*/{"BurningSpray",ELM_FIRE},
/*3*/{"SnowySpray",ELM_ICE},
/*4*/{"CrushingSpray",ELM_BREAK},
/*5*/{"DrillHead",ELM_BREAK|ELM_EXPLOSION},
/*6*/{"WindPressureBuster",ELM_WIND},
/*7*/{"RyuenjinEdge",ELM_FIRE|ELM_BLADE},
/*8*/{"RyuenjinTip",ELM_FIRE|ELM_BLADE},
/*9*/{"ScatteredFlower",ELM_TOXIC},
/*10*/{"GutsPunch",ELM_BREAK},
/*11*/{"FireballBuster",ELM_FIRE},
/*12*/{"AtomicBuster",ELM_FIRE},
/*13*/{"FiremanBall",ELM_FIRE},
/*14*/{"FireStormBoss",ELM_FIRE},
/*15*/{"FireStormTrail",ELM_FIRE},
/*16*/{"MeltCreeper",ELM_FIRE},
/*17*/{"FireDOT",ELM_FIRE|ELM_DONTSTOP},
/*18*/{"PoisonDOT",ELM_TOXIC|ELM_DONTSTOP},
/*19*/{"SyringeToss",ELM_TOXIC},
/*20*/{"ReplislasherEdge",ELM_WIND},
/*21*/{"ReplislasherTip",ELM_WIND},
/*22*/{"MegaCannon",ELM_EXPLOSION},
/*23*/{"EnergyCannon",ELM_EXPLOSION},
/*24*/{"LightWaveCannon",ELM_EXPLOSION},
/*25*/{"GuitarMachineGun",ELM_DONTSTOP},
/*26*/{"GuitarMachineGun2",ELM_DONTSTOP},
/*27*/{"PulseSong",ELM_DONTSTOP},
/*28*/{"DashPunchWall",ELM_BREAK},
/*29*/{"DashPunch",ELM_BREAK},
/*30*/{"ElectricSparkBoss",ELM_ELEC},
/*31*/{"ElectriggerV",ELM_ELEC},
/*32*/{"VioletZapper",ELM_ELEC},
/*33*/{"HawkPrecisionBuster",ELM_ELEC},
/*34*/{"ThriceGun",ELM_ICE},
/*35*/{"IceSlasherBoss",ELM_ICE},
/*36*/{"FlashPoint",ELM_EUCLID},
/*37*/{"StopArrow",ELM_EUCLID},
/*38*/{"AbsoluteFreeze",ELM_ICE},
/*39*/{"AbsoluteFreezeDirect",ELM_ICE},
/*40*/{"TurboLauncher",ELM_FIRE},
/*41*/{"Roaster",ELM_FIRE},

};


Function Bool CheckForFrostBiteHitstun(int PainType)
{
if(CheckInventory("FrostbiteMark"))
    {
    Int PainFlag;
    For(int j = 0; j < PAINCOUNT; j++)
	{
	If(PainRecord[j][0] == PainType)
		{
        //found our weapon paintype
        PainFlag = PainRecord[j][1];      
		}
	}
    if(PainFlag & ELM_ICE){Return 1;}
    }
return 0;
}

Function Bool CheckForSelfBlastGuard(int PainType)
{
    Int PainFlag;
    For(int j = 0; j < PAINCOUNT; j++)
	{
	If(PainRecord[j][0] == PainType)
		{
        //found our weapon paintype
        PainFlag = PainRecord[j][1];      
		}
	}
    if(PainFlag & ELM_EXPLOSION){Return 1;}
return 0;
}

Function Bool CheckForDontStop(int PainType)
{
//Damage types that won't break the stop status
    Int PainFlag;
    For(int j = 0; j < PAINCOUNT; j++)
	{
	If(PainRecord[j][0] == PainType)
		{
        //found our weapon paintype
        PainFlag = PainRecord[j][1];      
		}
	}
    if(PainFlag & ELM_DONTSTOP || PainFlag & ELM_EUCLID){Return 1;}
return 0;
}


#LIBDEFINE CRITCOUNT 9
//Crit Bitflags
#LIBDEFINE CRIT_NULL 0.0
#LIBDEFINE CRIT_ALWAYS 1.0
#LIBDEFINE CRIT_CONDITION 2.0
#LIBDEFINE CRIT_BURNSTATUS 4.0
#LIBDEFINE CRIT_POISONSTATUS 8.0
#LIBDEFINE CRIT_FROSTBITESTATUS 16.0
str CritRecord[CRITCOUNT][2] = {
/*
 * This contains all info regarding damagetypes that either always crit, or can crit under specific conditions

*/
//    DamageTypeName, DamageTypeElement/Flags,  
/*0*/{"StandardSaberTip",CRIT_ALWAYS},
/*1*/{"BeamRapierTip",CRIT_ALWAYS},
/*2*/{"RyuenjinTip",CRIT_ALWAYS},
/*3*/{"AtomicBuster",CRIT_CONDITION|CRIT_BURNSTATUS},
/*4*/{"ViperRifle",CRIT_CONDITION|CRIT_POISONSTATUS},
/*5*/{"SyringeToss",CRIT_CONDITION|CRIT_POISONSTATUS},
/*6*/{"ReplislasherTip",CRIT_ALWAYS},
/*7*/{"AbsoluteFreezeDirect",CRIT_CONDITION|CRIT_FROSTBITESTATUS},
/*8*/{"Roaster",CRIT_CONDITION|CRIT_BURNSTATUS},

};


Function Bool CheckForFireCrit(int PainType)
{
if(CheckInventory("BurnMark"))
    {
    Int CritFlag;
    For(int j = 0; j < CRITCOUNT; j++)
	{
	If(CritRecord[j][0] == PainType)
		{
        //found our weapon paintype
        CritFlag = CritRecord[j][1];      
		}
	}
    if(CritFlag & CRIT_BURNSTATUS){Return 1;}
    }
return 0;
}

Function Bool CheckForPoisonCrit(int PainType)
{
if(CheckInventory("PoisonMark"))
    {
    Int CritFlag;
    For(int j = 0; j < CRITCOUNT; j++)
	{
	If(CritRecord[j][0] == PainType)
		{
        //found our weapon paintype
        CritFlag = CritRecord[j][1];      
		}
	}
    if(CritFlag & CRIT_POISONSTATUS){Return 1;}
    }
return 0;
}

Function Bool CheckForFrostbiteCrit(int PainType)
{
if(CheckInventory("FrostbiteMark"))
    {
    Int CritFlag;
    For(int j = 0; j < CRITCOUNT; j++)
	{
	If(CritRecord[j][0] == PainType)
		{
        //found our weapon paintype
        CritFlag = CritRecord[j][1];      
		}
	}
    if(CritFlag & CRIT_FROSTBITESTATUS){Return 1;}
    }
return 0;
}


#LIBDEFINE IGNORECOUNT 10
str PainIgnore[IGNORECOUNT][1] = {
/*
 * Painstates that the damageevent doesn't process at all

*/
//    DamageTypeName, DamageTypeElement/Flags,  
/*0*/{"Drowning"},
/*1*/{"Slime"},
/*2*/{"Fire"},
/*3*/{"Crush"},
/*4*/{"Telefrag"},
/*5*/{"Falling"},
/*6*/{"Suicide"},
/*7*/{"Exit"},
/*8*/{"Ice"},
/*9*/{"InstantDeath"},
};

Function Bool CheckForIgnore(int PainType)
{
    For(int j = 0; j < IGNORECOUNT; j++)
	{
	If(PainIgnore[j][0] == PainType)
		{
        Return 1;   
		}
	}
return 0;
}