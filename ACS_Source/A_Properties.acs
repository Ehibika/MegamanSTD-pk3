/* -=- Properties -=-
 * Code that handles the Processing of class properties, 
 *
 * 

*/

#library "A_Properties"
#include "zcommon.acs"
#include "8bdmlib.acs"
#import "DB_Properties.acs"
#import "A_Core.acs"
#import "db_Loadout.acs"
#import "A_Loadout.acs"
#import "A_Pain.acs"

Function int MasteryCheck (int ThisWepType)
{
if(!ThisWepType){return 0;}
//First we will gather all the masteries we have and combine them as a bitflag
int MasteryFlag;

if(CheckProp(MasterProPList[0][PROP_NAME])){MasteryFlag = MasteryFlag|WF_BUSTER;}
if(CheckProp(MasterProPList[1][PROP_NAME])){MasteryFlag = MasteryFlag| WF_MACHINEGUN;}
if(CheckProp(MasterProPList[2][PROP_NAME])){MasteryFlag = MasteryFlag| WF_SPRAYER;}
if(CheckProp(MasterProPList[3][PROP_NAME])){MasteryFlag = MasteryFlag| WF_LAUNCHER;}
if(CheckProp(MasterProPList[4][PROP_NAME])){MasteryFlag = MasteryFlag| WF_MELEE;}
//log(f:ThisWepType,s:" : ",f:MasteryFlag);
if(ThisWepType & MasteryFlag){return 1;}
return 0;
}



Function bool CheckProp(str PropName)
{
if(CheckInventory(StrParam(s:"Pro_",s:PropName)))
    {
    //log(s:"got ",s:StrParam(s:"Pro_",s:PropName));
    Return true;
    }

return false;
}

Function bool CheckPlayerProp(int P, str PropName)
{
if(CheckActorInventory(P+1000,StrParam(s:"Pro_",s:PropName)))
    {
    //log(s:"got ",s:StrParam(s:"Pro_",s:PropName));
    Return true;
    }

return false;
}

Function bool CheckPropRange(int A, int B)
{
For(int h = A; h <= B; h++)
	{
    if(CheckProp(MasterProPList[h][PROP_NAME]))
        {
        Return true;
        }
    }
return false;
}

Function bool CheckMasteryDamage(str PainType)
{
//First Check for the flags
if(!CheckPropRange(0,4)){Return 0;}

int WepFlag;
For(int i = 0; i < WEAPONLIST; i++)
	{
	If(MasterWepList[i][4] == PainType || MasterWepList[i][5] == PainType)
		{
        //found our weapon paintype, now see if the player has a mastery for this weapon.
        WepFlag = MasterWepList[i][3];      
		}
	}

Return MasteryCheck(WepFlag);
}

Function bool CheckForElement (str PainType, int ElementFlag)
{
//Check to see if the given paintype is of a specific element
For(int i = 0; i < PAINCOUNT; i++)
	{
	If(PainRecord[i][0] == PainType)
		{
        //found our weapon paintype
        if(ElementFlag == PainRecord[i][1]) Return 1;      
		}
	}
Return 0;
}

Function Bool CheckForResistance(str PainType)
{
//First Check for the flags
if(!CheckPropRange(5,12)){Return 0;}

int ElementFlag;
For(int i = 0; i < PAINCOUNT; i++)
	{
	If(PainRecord[i][0] == PainType)
		{
        //found our weapon paintype
        ElementFlag = PainRecord[i][1];      
		}
	}
if(!ElementFlag){Return 0;}

//now see if the player has Resistance To this Element

Switch(ElementFlag)
    {
    Case ELM_FIRE: return CheckProp(MasterProPList[5][PROP_NAME]); break;
    Case ELM_ICE: return CheckProp(MasterProPList[6][PROP_NAME]); break;
    Case ELM_AQUA: return CheckProp(MasterProPList[7][PROP_NAME]); break;
    Case ELM_TOXIC: return CheckProp(MasterProPList[8][PROP_NAME]); break;
    Case ELM_ELEC: return CheckProp(MasterProPList[9][PROP_NAME]); break;
    Case ELM_WIND: return CheckProp(MasterProPList[10][PROP_NAME]); break;
    Case ELM_WIND: return CheckProp(MasterProPList[11][PROP_NAME]); break;
    Case ELM_BREAK:	return CheckProp(MasterProPList[12][PROP_NAME]); break;
    Case ELM_EUCLID: return CheckProp(MasterProPList[13][PROP_NAME]); break;
    Case ELM_BLADE:  return CheckProp(MasterProPList[14][PROP_NAME]); break;
    }

return 0;
}



Function Bool CheckForBladeParry(str PainType)
{
if(!CheckProp(MasterProPList[13][PROP_NAME])){Return 0;}
//First, check to see if we are carrying a melee or blade weapon
int ThisWeapon = STD_WhichWeapon();
If(!(MasterWepList[ThisWeapon][3] & WF_MELEE) && !(MasterWepList[ThisWeapon][3] & WF_BLADE)){Return 0;}


//then Check for weapon pain
For(int i = 0; i < WEAPONLIST; i++)
	{
    If(MasterWepList[i][4] == PainType || MasterWepList[i][5] == PainType)
		{
        If(MasterWepList[i][3] & WF_MELEE || MasterWepList[i][3] & WF_BLADE)
            {
            //This is melee/Break damage, don't reduce it.
            Return 0;   
            }
 
		}
	}

//Next check for anything blade elemental
int ElementFlag;
For(int j = 0; j < PAINCOUNT; j++)
	{
	If(PainRecord[j][0] == PainType)
		{
        //found our weapon paintype
        ElementFlag = PainRecord[j][1];      
		}
	}
if(ElementFlag & ELM_BLADE || ElementFlag & ELM_BREAK){Return 0;}

return 1;
}


Script "MSTD_PropertySetup" ENTER
{

//Initiates all the passive scripts this class needs
Delay(1);
//if(CheckProp(MasterProPList[14][PROP_NAME])){ACS_NamedExecuteAlways("Passive_Speedrunner",0,0);}
//if(CheckProp(MasterProPList[15][PROP_NAME])){ACS_NamedExecuteAlways("Passive_Acrobat",0,0);}
if(CheckProp(MasterProPList[15][PROP_NAME])){PlayerJumpZ[PlayerNumber()]+=5.0; SetActorProperty(0,APROP_JUMPZ,PlayerJumpZ[PlayerNumber()]);}
if(CheckProp(MasterProPList[20][PROP_NAME])){ACS_NamedExecuteAlways("Passive_Undershirt",0,0);}
if(CheckProp(MasterProPList[22][PROP_NAME])){ACS_NamedExecuteAlways("Passive_TeamMedic",0,0);}

}

Script "Passive_Undershirt" (void)
{
int HPMax = GetActorProperty(0,APROP_SPAWNHEALTH);
int HPNow = GetActorProperty(0,APROP_HEALTH);
/*
The undershirfFlag is taken by damage events, when the player doesn't have it,
this script waits untill they get back to full HP to restore the undershirfFlag
*/
GiveInventory("UndershirtFlag",1);
while(GetActorProperty(0,APROP_HEALTH) > 0)
    {
    
    if(!CheckInventory("UndershirtFlag"))
        {
        HPNow = GetActorProperty(0,APROP_HEALTH);
        if(HPNow >= HPMax){GiveInventory("UndershirtFlag",1);localAmbientSound("item/Refill",127);}
        }
    delay(17);
    }
}

Script "Passive_TeamMedic" (void)
{
/*
So long as the player is equipped with a medi weapon, they will auto regen HP after avoiding
damage for 1 second
*/
if(!CheckForTeamMedic()){Terminate;}

int HPMax = GetActorProperty(0,APROP_SPAWNHEALTH);
while(GetActorProperty(0,APROP_HEALTH) > 0)
    {
    log(i:GetActorPowerupTics(0,"HealRampPower"));
    if(GetActorPowerupTics(0,"HealRampPower")<315 && GetActorProperty(0,APROP_HEALTH) < GetActorProperty(0,APROP_SPAWNHEALTH))
        {
        if(CheckInventory("PoisonMark")){GiveInventory("DetoxLevel",5);GiveInventory("DetoxEfectSpawn",1);}
        else{HealThing(1,HPMax);}
        }
    delay(5);
    }
}

//#region -=- depreciated -=-
Script "Passive_Speedrunner" (Void)
{
/*
Checks the user's HP every second and gives them the speed boost if they are above
Half health and don't already have it. the passive is lost upon taking damage.
*/
while(GetActorProperty(0,APROP_HEALTH) > 0)
    {
    //log(i:GetHealthPercent(0,0,0) );
    if(GetHealthPercent(0,0,0) > 50 && !CheckInventory("PowerSpeedRunner")){GiveInventory("PowerSpeedRunner",1); LocalAmbientSound("support/Statup",127);}
    delay(35);
    }

}

Function Bool CheckSpeedrunnerLoss(void)
{
if(GetHealthPercent(0,0,0) <= 50 && CheckInventory("PowerSpeedRunner")){Return 1;}
Return 0;
}


Script "Passive_Acrobat" (Void)
{
/*
So long as we have movespeed of 1.0 or more, or we have a speedbuff, this passive will be in effect
*/


while(GetActorProperty(0,APROP_HEALTH) > 0)
    {
    TriggerAcrobatCheck();
    //log(f:PlayerJumpZ[PlayerNumber()]);
    delay(25);
    }
}

Function void TriggerAcrobatCheck (void)
{
int HighJump = 15.0;
int NoHighJump = 10.0;
    if(CheckProp(MasterProPList[15][PROP_NAME]) && !CheckInventory("CannotJump"))
    {
       if(CheckAcrobatCriteria()) 
        {
        if(GetActorProperty(0,APROP_JUMPZ) != HighJump){PlayerJumpZ[PlayerNumber()] = HighJump; SetActorProperty(0,APROP_JUMPZ,PlayerJumpZ[PlayerNumber()]);}
        }
    else
        {
        if(GetActorProperty(0,APROP_JUMPZ) != NoHighJump){PlayerJumpZ[PlayerNumber()] = NoHighJump; SetActorProperty(0,APROP_JUMPZ,PlayerJumpZ[PlayerNumber()]);}      
        } 
    }
}

Function Bool CheckAcrobatCriteria(void)
{

//Dequalifiers
if(CheckInventory("FrostBiteMark")){Return 0;}

if(GetActorProperty(0,APROP_SPEED) >= 1.0 
|| CheckInventory("PowerSpeedRunner")
){Return 1;}
Return 0;
}
//#endregion

Function Bool CheckForCrit(str PainType)
{
if(!CheckProp(MasterProPList[19][PROP_NAME])){Return 0;}
//Checks if the damage would be critical damage
int CritFlag;
For(int j = 0; j < CRITCOUNT; j++)
	{
	If(CritRecord[j][0] == PainType)
		{
        //found our weapon paintype
        CritFlag = CritRecord[j][1];      
		}
	}
if(CritFlag & CRIT_ALWAYS){Return 1;}

Return 0;
}



Function Bool CheckForTeamMedic(Void)
{
if(!CheckProp(MasterProPList[22][PROP_NAME])){Return 0;}
//Confirm if we are equipped with a medical weapon
str wepnamecheck;
For(int i = 0; i < WEAPONLIST; i++)
	{
    wepnamecheck = MasterWepList[i][1];
    If(CheckInventory(wepnamecheck) || CheckInventory(StrParam(s:wepnamecheck,i:2)))
		{
        If(MasterWepList[i][3] & WF_MEDICAL)
            {
            //You have a medical weapon
            Return 1;   
            }
 
		}
	}
Return 0;
}

Function bool CheckForElementalGuard (str PainType)
{
//Check to see if the damage is any of the elements this property
//Suppresses.
For(int i = 0; i < PAINCOUNT; i++)
	{
	If(PainRecord[i][0] == PainType)
		{
        //found our weapon paintype, now compare elements
        if(PainRecord[i][1] & ELM_FIRE) Return 1;   
        if(PainRecord[i][1] & ELM_ICE) Return 1; 
        if(PainRecord[i][1] & ELM_AQUA) Return 1; 
        if(PainRecord[i][1] & ELM_ELEC) Return 1;    
		}
	}
Return 0;
}