



int targetRegister; //replaced with User_STargTID
int angleDistRegister; // replaced with User_angleDistRegister



script "TracerTargeter" (int TargType, int TargRange) {
	int ownerNumber = PlayerNumber();
	int team;
	int x;
	int y;
	int z;
	int angle;
	int pitch;
	int i;
	
	str WepName = getweapon();
	//log(s:WepName);
	// each instance of this script is tied to a weapon, when you are off of it, it terminates
	
	//if(CheckInventory("TargScriptActive")){Terminate;}
		//an instance of this script is already live for this person
	
	if (TargRange<=0){setuservariable(0,"User_STargRange",600); 
					  adjustInventory("TargetingRangeFlag",getuservariable(0,"User_STargRange")+1);}
	else{setuservariable(0,"User_STargRange",TargRange);
		adjustInventory("TargetingRangeFlag",getuservariable(0,"User_STargRange")+1);}
	
	GiveInventory("TargActive",1);
	
	while(GetActorProperty(0,APROP_HEALTH) > 0 
			&& Checkinventory("TargActive")
			&& getWeapon() == WepName
			) { 
		team = getSelfTeam();
		x = GetActorX(0);
		y = GetActorY(0);
		z = GetActorZ(0) + GetActorViewHeight(0);
		angle = GetActorAngle(0);
		pitch = pitchAdjust(GetActorPitch(0));
		
		//targetRegister = -1;
		//angleDistRegister = MAX_TARGET_ANGLE;
		if(!Checkinventory("TargHolder"))
		{
		
		setuservariable(0,"User_STargTID",-1);
		
		if(Checkinventory("TargContractor"))
		{setuservariable(0,"User_angleDistRegister",MAX_TARGET_ANGLE2);}
		else
		{setuservariable(0,"User_angleDistRegister",MAX_TARGET_ANGLE);}

			if(team==TEAM_NONE) {
				for(i=0;i<ownerNumber;i++) {
					Targeter(x, y, z, angle, pitch, i);
				}
				for(i=ownerNumber+1;i<MAX_PLAYERS;i++) {
					Targeter(x, y, z, angle, pitch, i);
				}
			} else if(team!=TEAM_COOP) {
				for(i=0;i<ownerNumber;i++) {
					TargeterTeam(team, x, y, z, angle, pitch, i, TargType);
				}
				for(i=ownerNumber+1;i<MAX_PLAYERS;i++) {
					TargeterTeam(team, x, y, z, angle, pitch, i, TargType);
				}
			}
		}
		
		if(xyzDistance(0,getuservariable(0,"User_STargTID")+1000) <= TargRange
			&& !checkinventory("RespawnCamera"))
		{
		setpointer(AAPTR_TRACER,getuservariable(0,"User_STargTID")+1000);
		}
		else {setpointer(AAPTR_TRACER,0,AAPTR_NULL);}
		adjustInventory("TargetingFlag",getuservariable(0,"User_STargTID")+1);
		if (TargRange!=checkinventory("TargetingRangeFlag"))
			{
			setuservariable(0,"User_STargRange",TargRange);
			adjustInventory("TargetingRangeFlag",getuservariable(0,"User_STargRange")+1);
			}
		//giveinventory("TargScriptActive");
		delay(1);
	}
		//takeinventory("TargScriptActive",9)
		setuservariable(0,"User_STargTID",-1);
		setuservariable(0,"User_angleDistRegister",MAX_TARGET_ANGLE);
		adjustInventory("TargetingFlag",0);
		adjustInventory("TargetingRangeFlag",0);
}

function void TargeterTeam(int team, int x, int y, int z, int angle, int pitch, int i, int TargType) {
	if(team != GetPlayerInfo(i, PLAYERINFO_TEAM) && TargType <= 0) 
		{
		Targeter(x, y, z, angle, pitch, i);
		}
		
	else if(team == GetPlayerInfo(i, PLAYERINFO_TEAM) && TargType == 1) 
		{
		Targeter(x, y, z, angle, pitch, i);
		}
		
	Else if(TargType >= 2) 
		{
		Targeter(x, y, z, angle, pitch, i);
		}
}

function void Targeter(int x, int y, int z, int angle, int pitch, int i) {
	int target = i+1000;
	if(CheckActorInventory(target,"Discorded")==0
		&& GetActorProperty(target,APROP_HEALTH)>0
		&& CheckSight(0,target,CSF_NOFAKEFLOORS)) {
		int xDist = GetActorX(target) - x;
		int yDist = GetActorY(target) - y;
		int angleDist = vectorangle(xDist,yDist);
		int dist = fDistanceVal1(angleDist, xDist, yDist);
		int zDist = GetActorZ(target) + PLAYER_CENTER - z;
		int pitchDist = vectorangle(dist, zDist);
		//dist = fDistanceVal2(pitchDist, dist, zDist);		
		
		angleDist = WrapAround(angleDist-angle);
		pitchDist = WrapAround(pitchDist-pitch);
		angleDist = fixedMul(angleDist,angleDist) + fixedMul(pitchDist,pitchDist);
		//print(f:angleDist);
		if(angleDist<getuservariable(0,"User_angleDistRegister")) {
			//targetRegister = i;
			//angleDistRegister = angleDist;
			
			setuservariable(0,"User_STargTID",i);
			setuservariable(0,"User_angleDistRegister",angleDist);
			
			
		}
	}
}

function int fDistanceVal1(int ang, int x, int y)
{
	int len;
	
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(y, sin(ang));
	else len = fixeddiv(x, cos(ang));

	//print(f:len);
	return len;
}

function int fDistanceVal2(int ang, int len, int z)
{
	if(((ang+0.125)%0.5) > 0.25) len = fixeddiv(z, sin(ang));
	else len = fixeddiv(len, cos(ang));

	//print(f:len);
	return len;
}

function int pitchAdjust(int i) {
	if(i>0.0) return 1.0-i;
	return -i;
}

function int WrapAround(int i)
{
	if(i<-0.5) return i+1.0;
	if(i>0.5) return i-1.0;
	return i;
}


function int getSelfTeam(void)
{
if (GetCVar("teamplay")==1||GetCVar("teamlms")==1||GetCVar("teampossession")==1
||GetCVar("teamgame")==1){
	Return PlayerTeam();
} else if (GetCVar("cooperative")==1) {
	Return TEAM_COOP;
}
Return TEAM_NONE;
}

function void adjustInventory(str item, int quantity) {
	int diff = quantity-CheckInventory(item);
	if(diff>0) {
		giveInventory(item,diff);
	} else if (diff<0) {
		takeInventory(item,-diff);
	}
}

function void adjustActorInventory(int actor, str item, int quantity) {
	int diff = quantity-CheckActorInventory(actor,item);
	if(diff>0) {
		giveActorInventory(actor,item,diff);
	} else if (diff<0) {
		takeActorInventory(actor,item,-diff);
	}
}

script "TargeterHudView" ENTER CLIENTSIDE {
	int ownerNumber = PlayerNumber();
	
	if(ownerNumber==ConsolePlayerNumber()) {
	
		int xOffset = 10.0;
		int yOffset = 380.0;
		int t;
		int T_Range;
		int i;
	
		while(GetActorProperty(0,APROP_HEALTH) > 0) {
			t =  checkInventory("TargetingFlag"); //getuservariable(0,"User_STargTID")+1;
			T_Range = checkInventory("TargetingRangeFlag"); //getuservariable(ownerNumber+1000,"User_STargRange");
			/*
			SetHudSize(640, 480, 0);
			SetFont("SMALLFONT");
			HudMessage(s:"target number: ", i:t; HUDMSG_PLAIN, 100, CR_UNTRANSLATED, xOffset+0.1, yOffset+0.0, 1.0);
			if(t>0) {
				HudMessage(s:"target name: ",n:t; HUDMSG_PLAIN, 101, CR_UNTRANSLATED, xOffset+0.1, yOffset+8.0, 1.0);
			} else {
				HudMessage(s:"no target"; HUDMSG_PLAIN, 101, CR_UNTRANSLATED, xOffset+0.1, yOffset+8.0, 1.0);
			}
			HudMessage(s:"LOSAmmo: ",i:checkInventory("LOSAmmo"); HUDMSG_PLAIN, 102, CR_UNTRANSLATED, xOffset+0.1, yOffset+16.0, 1.0);
			*/
			
			if(t>0) {
			if(checkinventory("TargHolder")) {
				HudMessageOnActorZPlusAllign(1000-1+t, PLAYER_CENTER, 103, 0, 0, 0, 0, T_Range, "JUSTA0", "Target", 0, CR_UNTRANSLATED);
				}
				else
				{
				HudMessageOnActorZPlusAllign(1000-1+t, PLAYER_CENTER, 103, 0, 0, 0, 0, T_Range, "JUSTB0", "Target", 0, CR_UNTRANSLATED);
				}
			}
			
			//apparently these two for loops are done in a way that excludes the
			//script activator. possibly for potential desynch maybe?
			
			for(i=0;i<ownerNumber;i++) {
				if(CheckActorInventory(1000+i,"Discorded")) {
					HudMessageOnActorZPlusAllign(1000+i, PLAYER_CENTER, 200+i, 0, 0, 0, -10, 9000, "JUSTA0", "Discord", 0, CR_UNTRANSLATED);
				}
			}
			for(i=ownerNumber+1;i<MAX_PLAYERS;i++) {
				if(CheckActorInventory(1000+i,"Discorded")) {
					HudMessageOnActorZPlusAllign(1000+i, PLAYER_CENTER, 200+i, 0, 0, 0, -10, 9000, "JUSTA0", "Discord", 0, CR_UNTRANSLATED);
				}
			}
			
			delay(1);
		}
	}
}

script "TargeterHudViewRespawn" RESPAWN CLIENTSIDE {
	ACS_NamedExecuteAlways("TargeterHudView",0);
}
/*
script 407 (void) {
	SetResultValue(checkInventory("TargetingFlag"));
}

script 408 (int target) {
	if(checkInventory("DiscordActive")) {
		GiveInventory("DiscordDeactivate",1);
		do {
			delay(1);
		} while(checkInventory("DiscordActive"));
		TakeInventory("DiscordDeactivate",1);
	}
	
	int owner = ActivatorTID();
	target = target-1+1000;
	SetActivator(0,AAPTR_NULL);
	
	GiveActorInventory(owner,"DiscordActive",1);
	GiveActorInventory(owner,"LOSAmmo",LOSAMMO_MAX);
	GiveActorInventory(target,"Discorded",1);
	
	while(GetActorProperty(owner,APROP_HEALTH)>0
		&& GetActorProperty(target,APROP_HEALTH)>0
		&& CheckActorInventory(owner,"DiscordDeactivate")==0
		&& CheckActorInventory(owner,"LOSAmmo")>0) {
		
		if(CheckSight(owner,target,CSF_NOFAKEFLOORS)) {
			AdjustActorInventory(owner,"LOSAmmo",LOSAMMO_MAX);
		} else {
			TakeActorInventory(owner,"LOSAmmo",1);
		}
		
		delay(1);
		  
	}
	
	TakeActorInventory(owner,"DiscordActive",1);
	TakeActorInventory(owner,"LOSAmmo",LOSAMMO_MAX);
	TakeActorInventory(target,"Discorded",1);
}
*/
script "TargJoinSetup" ENTER { //So joining players see stuff right
	for(int i=0;i<MAX_PLAYERS;i++) {
		Thing_ChangeTID(1000+i,1000+i);
	}
}
//Pretty sure I don't need a respawn script to call this too.


