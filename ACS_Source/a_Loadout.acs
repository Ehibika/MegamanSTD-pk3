/* -=- Loadout System -=-
 * Code that handles the distribution of loadout elements, 
 *
 * 

*/
#library "A_Loadout"
#include "zcommon.acs"
#Import "db_Loadout.acs"



script "MSTD_ClassSetup" ENTER
{
int pln = playernumber();
int plc = PlayerClass(pln);

if(PlayerIsSpectator(pln) != 0 && (ClassifyActor(pln+1000) & ACTOR_ALIVE)){Terminate;}

int WepA_Num = GetUserCvar(pln,"Lo_WepA");
int WepB_Num = GetUserCvar(pln,"Lo_WepB");

bool PickDone = False;
bool BotPick = False;

int picknum;
int pickRollcount;

int IconChoice = GetUserCvar(pln,"Lo_Emblem");
int SpeedPenalty = 0.0;

//first let's check for illegal numbers due to direct
//manilulation
if(WepA_Num < 0 || WepA_Num > WEAPONLIST){WepA_Num = 0;}
if(WepB_Num < 0 || WepB_Num > WEAPONLIST){WepB_Num = 0;}
//if(SubWep_Num < 0 || SubWep_Num > SUBWEAPONLIST_MAX){SubWep_Num = 0;}


if ((ClassifyActor(0) & ACTOR_BOT))
	//Bots always use the last weapon they get, but both are defined the same just in case
	{
		while(!BotPick)
		{
		WepA_Num = random(1,WEAPONLIST-1);
		WepB_Num = random(1,WEAPONLIST-1);
		//IconChoice = Random(0,PLAYERICON_MAX-1);
		
			if(MasterWepList[WepA_Num][3] && WF_NOBOT)
			{
			BotPick = true;
			}
		}
	}

//===|Check Weapon A
if(WepA_Num >= 0)
	{
		//log(s:"Get First = ", s:MasterWepList[WepA_Num][1]);
		GiveInventory(MasterWepList[WepA_Num][1],1);		
	}

//===|Check Weapon B
if(WepB_Num >= 0)
	{
	if(WepA_Num != WepB_Num)
	{
		//log(s:"Get Second = ", s:MasterWepList[WepB_Num][1]);
	GiveInventory(strParam(s:MasterWepList[WepB_Num][1],i:2),1);
	}
	else //Doubled weapon, you get a military buster or Wind Pressure Buster
		{
			if(WepA_Num == 0 && WepB_Num == 0){GiveInventory(strParam(s:MasterWepList[WINDPRESSUREBUSTER][1],i:2),1);}
			else{GiveInventory(strParam(s:MasterWepList[MILITARYBUSTER][1],i:2),1);}
		}
	}


//===|supplemental stuff
if	 (MasterWepList[WepA_Num][4] == "MEDICAL")
	{ //got a medical weapon? get mediscan
	GiveInventory("Mediscan",1);
	}

	
delay(1);
}

Function int STD_WhichWeapon(void) // Which STD weapon is the player currently using.  From MasterWepList array
{
For(int i = 0; i < WEAPONLIST; i++)
	{
	If(CheckWeapon2(MasterWepList[i][1]))
		{
		If(MasterWepList[i][3] > 0.0){Return i;}
		}
	}
Return -1;
}

Function str STD_WhichWeaponName(void) //Find the weapon the player is currently using and return the name of it
{
For(int i = 0; i < WEAPONLIST; i++)
	{
	If(CheckWeapon2(MasterWepList[i][1]))
		{
		If(MasterWepList[i][3] > 0.0){Return MasterWepList[i][1];}
		}
	}
Return "";
}

Function int STD_WhichWeaponFlags(void) //Find the weapon the player is currently using and return Their BitFlags
{
For(int i = 0; i < WEAPONLIST; i++)
	{
	If(CheckWeapon2(MasterWepList[i][1]))
		{
		If(MasterWepList[i][3] > 0.0){Return MasterWepList[i][3];}
		}
	}
Return 0;
}

Function int GetThisWeaponType(void) //Checks for the current weapon type by checking for it's bitflag
{
int WepFlags = STD_WhichWeaponFlags();
if(WepFlags & WF_BUSTER) return WF_BUSTER;
else if(WepFlags & WF_MACHINEGUN) return WF_MACHINEGUN;
else if(WepFlags & WF_SPRAYER) return WF_SPRAYER;
else if(WepFlags & WF_LAUNCHER) return WF_LAUNCHER;
else if(WepFlags & WF_MELEE) return WF_MELEE;
return 0.0;
}

//#region -=- Extra Weapon Functions
#region -=- Extra Weapon Functions

function bool CheckWeapon2(str weapon) {
	//return (CheckWeapon(weapon)||CheckWeapon(AddSuffix(weapon,"2")));
	return (CheckWeapon(weapon)||(StrIcmp(weapon,SubtractSuffix(GetWeapon()))==0));
}

function str SubtractSuffix(str string)  {
	return StrLeft(string,StrLen(string)-1);
}

function bool CheckInventory2(str inventory_item) {
	return (CheckInventory(inventory_item)
		||CheckInventory(AddSuffix(inventory_item,"1"))
		||CheckInventory(AddSuffix(inventory_item,"2"))
		||CheckInventory(AddSuffix(inventory_item,"3"))
		||CheckInventory(AddSuffix(inventory_item,"4"))
		);
}

function str AddSuffix(str string, str suffix)  {
	return StrParam(s:string,s:suffix);
}
#endregion
//#endregion