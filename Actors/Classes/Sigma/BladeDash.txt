Const int BDSH_SPD = 55;
Const int SIGMABD_StartAng = 75;
Const int SIGMABD_SweepDura = 7;

actor Ability1_Sigma : AbilityMasterBase
{
Weapon.AmmoUse2 1
Weapon.AmmoGive2 0
Inventory.Pickupmessage "$PU_MEGABUSTER"
Obituary "$OB_BLADEDASHSABER"
Tag "Blade Dash"
weapon.ammotype2 "AbilityAmmo"
inventory.icon "BDASWI"
+WEAPON.ALLOW_WITH_RESPAWN_INVUL
States
{

Ready:
HSPR A 0 
"####" A 1 //A_WeaponReady
goto Fire

Fire:
BDAS F 0 A_PlaySoundEx("weapon/BreakDash","Weapon")
"####" F 0 A_GiveInventory("BreakDashCharge", 17)
"####" F 0 A_GiveInventory("DashSet_A")
BDAS OZG 1
Fire.DashLoop:
"####" F 0 A_GiveInventory("BladeDash_H")
"####" F 0 A_FireCustomMissile("BladeDashContact", 0, 0, 0, 0)
"####" F 1 //A_Jumpif(CallACS("MSTD_ButtonCheck",BT_ATTACK) == True,"Fire.Recoil")
"####" F 0 A_JumpIfInventory("BreakDashRecoil", 1, "Fire.Recoil")
"####" F 0 A_TakeInventory("BreakDashCharge", 1)
"####" F 0 A_JumpIfInventory("BreakDashCharge", 1, "Fire.DashLoop")
"####" F 0 A_GiveInventory("DashSetOff")
goto Fire.Conclude


/*
"####" A 0 A_GiveInventory("DashSet_A")
"####" BBBCCCCCCC 1 A_GiveInventory("BladeDash_H")
"####" C 0 A_GiveInventory("DashSetOff")
"####" BA 1
*/

Fire.Recoil:
"####" F 0 A_TakeInventory("BreakDashCharge", 100)
"####" F 0 A_GiveInventory("DashSetOff")
BDAS H 2
Fire.Conclude:
"####" F 0 A_ScaleVelocity(0.1)
DW18 A 1
"####" A 0 A_GiveInventory("BladeDashCooldown")
"####" A 0 A_PlaySoundEx("weapon/ChargeKick","Soundslot6")
"####" A 0 A_SpawnItemEx("SigmaBD_BladeWatcher", cos(-pitch)*16, 0, 32+(sin(-pitch)*16), 0, 0, 0, 0, SXF_TRANSFERPITCH)
"####" A 0 A_SpawnItemEx("SigmaBD_BladeVisualWatcher", cos(-pitch)*16, 0, 32+(sin(-pitch)*16), 0, 0, 0, 0, SXF_TRANSFERPITCH)
"####" C 1 OffSet(-43,36)//A_FireCustomMissile("AxeMelee2",0,0,8,0)
"####" D 1 OffSet(1,33)
"####" D 1 OffSet(-48,33)
"####" E 1 OffSet(1,31)
"####" E 1 OffSet(-43,43)
"####" E 1 OffSet(-102,53)
"####" A 0 //A_GiveInventory("MeleeSwingBuffer")
TNT1 A 17
"####" A 0 A_GiveInventory("RefireBuffer")
"####" A 0 A_Jump(256,"End")
goto End

AltFire:
"####" A 1
End:
"####" A 1 A_TakeInventory("AbilityActiveFlag",9)
"####" A 0 
Goto End
}
}
//====
actor UseAbility1_Sigma : CustomInventory
{
states
{
Use:
WEA2 A 0 A_GiveInventory("BladeDashAbility",1)
fail
}
}

actor BladeDashAbility : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("BladeDashCooldownItem",1,"Nope")
TNT1 A 0 ACS_NamedExecuteAlways("RunClassAbility",0,1)
stop

Nope:
TNT1 A 0 ACS_Execute(979,0)
stop
}
}

//=================
//=================

actor BladeDash_H : CustomInventory
{
States
{
Pickup:
	TNT1 A 0 A_CheckFloor("Floor")
	TNT1 A 0 A_ChangeVelocity(BDSH_SPD*cos(pitch), 0, (BDSH_SPD/1)*sin(-pitch), CVF_RELATIVE|CVF_REPLACE)
	stop
Floor:
	TNT1 A 0 A_ChangeVelocity(BDSH_SPD*cos(pitch), 0, ((BDSH_SPD/1)*sin(-pitch) > 0) * (BDSH_SPD/1)*sin(-pitch), CVF_RELATIVE|CVF_REPLACE)
	stop
}

/*
Pickup:
TNT1 A 0 A_ChangeVelocity(55,0,momz,CVF_RELATIVE|CVF_REPLACE)//A_Recoil(-20)
//35 float x
//TNT1 A 0 A_SpawnItemEx("BladeDashContact",0,0,16)
stop
}
*/
}
/*
actor BladeDashContact : BasicExplosion
{
Obituary "$OB_BLADEDASH"
States
{
Spawn:
TNT1 A 0
TNT1 A 1 A_Explode(8,48,0,0,48)
stop
}
}
*/

actor BladeDashContact : FastProjectileBase
{
    PROJECTILE
    Obituary "$OB_BLADEDASHIMPACT"
    Damagetype "BreakDash"
    height 16
    radius 22
    speed 65
    Damage (50)
    States
    {
    Spawn:
        TNT1 A 0
        TNT1 A 1
        stop
    Death:
        TNT1 A 0 A_GiveToTarget("BreakDashRecoil", 1)
        stop
    }
}

actor BladeDashSaberEdgeProtect : PowerProtection
{
Powerup.Duration -1
damagefactor "Normal", 1.0
/*
damagefactor "StandardSaberTip", 0.0
damagefactor "StandardSaberEdge", 0.0
damagefactor "BeamRapierTip", 0.0
damagefactor "BeamRapierEdge", 0.0
damagefactor "TriangularSaberTip", 0.0
damagefactor "TriangularSaberEdge", 0.0
damagefactor "ReplislasherTip", 0.0
damagefactor "ReplislasherEdge", 0.0
*/
damagefactor "BladeDashSaberEdge", 0.0
damagefactor "BladeDashSaberTip", 0.0
}

actor BladeDashTipProtect : PowerProtection
{
Powerup.Duration -1
damagefactor "Normal", 1.0
/*
damagefactor "StandardSaberTip", 0.0
damagefactor "StandardSaberEdge", 0.0
damagefactor "StandardSaberTip", 0.0
damagefactor "StandardSaberEdge", 0.0
damagefactor "BeamRapierTip", 0.0
damagefactor "BeamRapierEdge", 0.0
damagefactor "TriangularSaberTip", 0.0
damagefactor "TriangularSaberEdge", 0.0
damagefactor "ReplislasherTip", 0.0
damagefactor "ReplislasherEdge", 0.0
*/
damagefactor "BladeDashSaberEdge", 0.0
damagefactor "BladeDashSaberTip", 0.0
}

/* =-= Bika's Notes -=-

Sigma is the creation of TheophileCaceres

I tried smoothing out the function of Blade dash, making it so it stops and initiates the swing upon bumping into something.
that said, I'm not digging the present of the pseudo-ripper on the dash itself, generally don't like stuff like that
for it's inconsistency.

Lastly, I really don't see the point behind granting a 1 second buffer against all melees, okay so it stops a followup
hit from a melee but it doesn't stop a followup hit from any other close ranged burst weapon. it really just feels like
a flowbreaker for what seems to be a saber oriented character.

*/
//[+]========================================================================[+]
//--------------------------------|Projectiles |--------------------------------
//[+]========================================================================[+]
/*
actor SigmaBD_BladeWatcher
{
    PROJECTILE
    +NOINTERACTION
    renderstyle none
    speed 32
    height 1
    radius 1
    States
    {
    Spawn:
		TNT1 A 0
	Spawn1:
        TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -50, SXF_MULTIPLYSPEED)
		TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*32,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
		TNT1 A 0 A_SetArg(0,args[0]+1)
		TNT1 A 0 A_JumpIf(args[0] < 3,"Spawn1")
		TNT1 A 0 A_SetArg(0,0)
		TNT1 A 0 A_PlaySoundEx("weapon/SlashClaw","Weapon")
	Spawn2:
	TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -50+(10*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -40+(10*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
		TNT1 A 0 A_SetArg(1,args[1]+2)		
		TNT1 A 0 A_JumpIf(args[1] < 10,"Spawn2")
        stop
    WindDown1:
        TNT1 A 0
        stop
    }
}
*/
actor SIGMABD_BladeWatcher
{
    PROJECTILE
    +NOINTERACTION
    renderstyle none
    speed 32
    height 1
    radius 1
    States
    {
    Spawn:
		TNT1 A 0
	Spawn1:
        TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -SIGMABD_StartAng, SXF_MULTIPLYSPEED)
		TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
		TNT1 A 0 A_SetArg(0,args[0]+1)
		TNT1 A 0 A_JumpIf(args[0] < 3,"Spawn1")
		TNT1 A 0 A_SetArg(0,0)
		TNT1 A 0 A_PlaySoundEx("weapon/SlashClaw","Weapon")
	Spawn2:
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -SIGMABD_StartAng+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -(SIGMABD_StartAng-10)+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -(SIGMABD_StartAng-20)+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -(SIGMABD_StartAng-30)+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
		TNT1 A 0 A_SetArg(1,args[1]+2)		
		TNT1 A 0 A_JumpIf(args[1] < SIGMABD_SweepDura,"Spawn2")
        stop
    WindDown1:
        TNT1 A 0
        stop
    }
}

actor SIGMABD_BladeVisualWatcher
{
    +MISSILE
	+NOGRAVITY
	+SKYEXPLODE
	+EXPLODEONWATER
	+DONTSPLASH
	+PAINLESS
	+CLIENTSIDEONLY
	+THRUACTORS
    renderstyle none
    speed 32
    height 1
    radius 1
    States
    {
    Spawn:
		TNT1 A 0
	Spawn1:
        TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeVisual", 0, 0, 0, cos(pitch), 0, sin(-pitch), -SIGMABD_StartAng, SXF_MULTIPLYSPEED)
		TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
		TNT1 A 0 A_SetArg(0,args[0]+1)
		TNT1 A 0 A_JumpIf(args[0] < 3,"Spawn1")
		TNT1 A 0 A_SetArg(0,0)
		TNT1 A 0 A_PlaySoundEx("weapon/SlashClaw","Weapon")
	Spawn2:
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeVisual", 0, 0, 0, cos(pitch), 0, sin(-pitch), -SIGMABD_StartAng+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeVisual", 0, 0, 0, cos(pitch), 0, sin(-pitch), -(SIGMABD_StartAng-10)+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeVisual", 0, 0, 0, cos(pitch), 0, sin(-pitch), -(SIGMABD_StartAng-20)+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeVisual", 0, 0, 0, cos(pitch), 0, sin(-pitch), -(SIGMABD_StartAng-30)+(20*args[1]), SXF_MULTIPLYSPEED)
	TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
		TNT1 A 0 A_SetArg(1,args[1]+2)		
		TNT1 A 0 A_JumpIf(args[1] < SIGMABD_SweepDura,"Spawn2")
        stop
    WindDown1:
        TNT1 A 0
        stop
    }
}


actor SigmaBD_BladeStart : ProjectileBase
{
+RIPPER
+SERVERSIDEONLY
damagetype "BladeDashSaberEdge"
Obituary "$OB_BLADEDASHSABER"
damage (100)
height 5
radius 5
Speed 25
scale 2.5
states
{
Spawn:
TNT1 A 0
TNT1 A 0 A_Jumpif(pitch > 12,"SpawnTip")
TNT1 A 0 A_setPitch(Pitch+1)
TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeStart",0,0,0,momx,momy,momz,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPITCH)
TNT1 A 1 A_SpawnItemEx("SigmaBD_BladeEdgeFX2",0,0,0,0,0,0,0,SXF_ABSOLUTEMOMENTUM)
Goto Death

SpawnTip:
TNT1 A 0 A_setPitch(Pitch+1)
TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTip",0,0,0,momx,momy,momz,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPITCH)
TNT1 A 1 A_SpawnItemEx("SigmaBD_BladeTipFX",0,0,0,0,0,0,0,SXF_ABSOLUTEMOMENTUM)
Goto Death

Death:
TNT1 A 0 A_SpawnItemEx("OilPitIgnite",0,0,8)
stop
}
}

actor SigmaBD_BladeTip : ProjectileBase
{
+RIPPER
+SERVERSIDEONLY
damagetype "BladeDashSaberTip"
Obituary "$OB_BLADEDASHSABER"
damage (150)
height 5
radius 5
Speed 26
scale 2.5
states
{
Spawn:
TNT1 A 0
TNT1 A 0 A_Jumpif(pitch > 16,"Death")
TNT1 A 0 A_setPitch(Pitch+1)
TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTip",0,0,0,momx,momy,momz,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPITCH)
TNT1 A 1 A_SpawnItemEx("SigmaBD_BladeTipFX",0,0,0,0,0,0,0,SXF_ABSOLUTEMOMENTUM)
Goto Death
Death:
TNT1 A 0 A_SpawnItemEx("OilPitIgnite",0,0,8)
stop
}
}

actor SIGMABD_BladeVisual : FastProjectileBase
{
+MISSILE
+NOGRAVITY
+SKYEXPLODE
+EXPLODEONWATER
+DONTSPLASH
+PAINLESS
+CLIENTSIDEONLY
+THRUACTORS
RenderStyle None
height 5
radius 5
Speed 25
scale 2.5
states
{
Spawn:
TNT1 A 0
TNT1 A 0 A_Jumpif(pitch > 8,"Death")
TNT1 A 0 A_setPitch(Pitch+1)
TNT1 A 0 A_SpawnItemEx("SIGMABD_BladeVisual",0,0,0,momx,momy,momz,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPITCH)
TNT1 A 1 A_SpawnItemEx("SIGMABD_BladeEdgeFX2",0,0,0,0,0,0,0,SXF_ABSOLUTEMOMENTUM)
Goto Death

Death:
TNT1 A 0 
stop
}
}


actor SigmaBD_BladeEdgeFX : BasicNOTClientside
{
scale 3.5
XScale 6.5
Alpha 1.0
ReactionTime 8
renderstyle "Add"
States
{
Spawn:
TNT1 A 0
TNT1 A 0 A_GiveInventory("ProjectileCode",1)
BASB V 1
Spawn2:
BASB V 1 A_Fadeout
TNT1 A 0 A_CountDown
loop

Death:
TNT1 A 0
stop
}
}

actor SigmaBD_BladeTipFX : SigmaBD_BladeEdgeFX
{
States
{
Spawn:
TNT1 A 0
TNT1 A 0 A_GiveInventory("ProjectileCodeSyncTarget",1)
SABR A 3
Spawn2:
SABR A 1 A_Fadeout
TNT1 W 0 A_CountDown
loop

Death:
TNT1 A 0
stop
}
}


actor SigmaBD_BladeEdgeFX2 : SigmaBD_BladeEdgeFX {ReactionTime 1}
actor SigmaBD_BladeTipFX2 : SigmaBD_BladeTipFX {ReactionTime 1}


actor SigmaBD_BladeSlashFX1 : BasicHelper
{
+MISSILE
+CLIENTSIDEONLY
	reactiontime 20
	var int user_angle;
	States
	{
		Spawn:
		TNT1 A 0
        TNT1 A 0 A_GiveInventory("ProjectileCodeSyncTarget",1)
        //TNT1 A 0 A_SetPitch(CallACS("PitchGrab"))
		TNT1 A 0 A_SetUserVar("user_angle", -50)
		TNT1 A 3
        TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE )
		SpawnLoop:
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*150, 0, 12-(sin(pitch)*150), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*125, 0, 12-(sin(pitch)*125), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
        TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTipFX", cos(pitch)*200, 0, 12-(sin(pitch)*200), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SetUserVar("user_angle", user_angle + 5)
        TNT1 A 0 A_Countdown
        
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*150, 0, 12-(sin(pitch)*150), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*125, 0, 12-(sin(pitch)*125), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
        TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTipFX", cos(pitch)*200, 0, 12-(sin(pitch)*200), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SetUserVar("user_angle", user_angle + 5)
        TNT1 A 0 A_Countdown
        
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*150, 0, 12-(sin(pitch)*150), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*125, 0, 12-(sin(pitch)*125), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
        TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTipFX", cos(pitch)*200, 0, 12-(sin(pitch)*200), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SetUserVar("user_angle", user_angle + 5)
        TNT1 A 0 A_Countdown

		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*150, 0, 12-(sin(pitch)*150), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*125, 0, 12-(sin(pitch)*125), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
        TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTipFX", cos(pitch)*200, 0, 12-(sin(pitch)*200), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SetUserVar("user_angle", user_angle + 5)
        TNT1 A 0 A_Countdown

		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*150, 0, 12-(sin(pitch)*150), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeEdgeFX", cos(pitch)*125, 0, 12-(sin(pitch)*125), 0, 0, 0, 0+user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
        TNT1 A 0 A_SpawnItemEx("SigmaBD_BladeTipFX", cos(pitch)*200, 0, 12-(sin(pitch)*200), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
		TNT1 A 0 A_SetUserVar("user_angle", user_angle + 5)
		TNT1 A 0 A_Countdown
		TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE )
		loop
		Death:
		TNT1 A 0
		stop
	}
}

//[+]========================================================================[+]
//------------------------------|Cooldown Actors|------------------------------
//[+]========================================================================[+]
actor BladeDashCooler : WatcherBase // Coolers are a type of watcher actor that handle weapon cooldowns
{
States
{
Spawn:
TNT1 A 0 A_JumpIfInTargetInventory("isDead",1,"DeathTake")
TNT1 A 1
TNT1 A 0 A_TakeFromTarget("BladeDashCooldownItem",1)
TNT1 A 0 A_JumpIfInTargetInventory("BladeDashCooldownItem",1,"Spawn")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("AltCooldownFlag",99)
TNT1 A 0
stop
}
}

actor BladeDashCooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Giveinventory("BladeDashCooldownItem",153)
TNT1 A 0 A_Giveinventory("AltCooldownFlag")
TNT1 A 0 A_Spawnitemex("BladeDashCooler")
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor BladeDashCooldownItem : inventory
{
inventory.amount 1
inventory.maxamount 153 
}

/* =-= Bika's notes =-=
Let's keep cooldown inventories divisible by 35 or 17, a 6.28 sec cooldown is ridiculous!

*/