actor Ability1_Massimo : AbilityMasterBase
{
Weapon.AmmoUse2 1
Weapon.AmmoGive2 0
Inventory.Pickupmessage "$PU_MEGABUSTER"
Obituary "$OB_WHIRLWIND"
Tag "HyperBomb Ability"
weapon.ammotype2 "AbilityAmmo"
inventory.icon "TOMASI"
+WEAPON.ALLOW_WITH_RESPAWN_INVUL
States
{

Ready:
KINH A 0 
"####" A 1 //A_WeaponReady
goto Fire

Fire:
KINH D 3 A_PlaySoundEx("misc/kingchop","Weapon")
KINH H 1 A_FireCustomMissile("whirlwindWatcher",0,0,0,0,0,0)
KINH H 0 A_GiveInventory("BlueRageSwingGuard",1)
KINH H 1 OffSet(-40,34)
KINH H 1 OffSet(-82,36)
KINH H 1 OffSet(-126,38)
KINH H 1 OffSet(-172,40)
KINH H 1 OffSet(-220,42)
TNT1 A 7
"####" C 0 A_GiveInventory("WhirlWindCooldown")
"####" C 0 A_GiveInventory("RefireBuffer")
"####" C 0 A_Jump(256,"End")
goto End

AltFire:
"####" A 1
End:
"####" A 1 A_TakeInventory("AbilityActiveFlag",9)
"####" C 0 
Goto End
}
}
//====

actor UseAbility1_Massimo : CustomInventory
{
states
{
Use:
WEA2 A 0 A_GiveInventory("WhirlWindAbility",1)
fail
}
}

actor WhirlWindAbility : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("WhirlWindCooldownItem",1,"Nope")
TNT1 A 0 ACS_NamedExecuteAlways("RunClassAbility",0,1)
stop

Nope:
TNT1 A 0 ACS_Execute(979,0)
stop
}
}
//=================
//=================

actor whirlwindSwingTimer : PowerUp
{
inventory.amount 1
Powerup.Duration 11
}

actor whirlwindProtect : PowerProtection
{
Powerup.Duration 10
damagefactor "whirlwind", 0.0
}

//[+]========================================================================[+]
//--------------------------------|Projectiles |--------------------------------
//[+]========================================================================[+]
actor whirlwindWatcher
{
    PROJECTILE
    +NOINTERACTION
    renderstyle none
    speed 32
    height 1
    radius 1
    States
    {
    Spawn:
        TNT1 A 0
        TNT1 A 0 A_GiveInventory("ProjectileCode",1)
    Spawn1:
        TNT1 A 1 A_Warp(AAPTR_TARGET, cos(-pitch)*16,0,32+(sin(-pitch)*16), 0, WARPF_USECALLERANGLE)
        TNT1 A 0 A_SpawnItemEx("whirlwindStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -90+(10*args[0]), SXF_MULTIPLYSPEED)
        TNT1 A 0 A_SpawnItemEx("whirlwindStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -80+(10*args[0]), SXF_MULTIPLYSPEED)
        TNT1 A 0 A_SpawnItemEx("whirlwindStart", 0, 0, 0, cos(pitch), 0, sin(-pitch), -70+(10*args[0]), SXF_MULTIPLYSPEED)
        TNT1 A 0 A_SpawnItemEx("whirlwindSlashFX1", 0, 0, 0, cos(pitch), 0, sin(-pitch), -90+(10*args[0]), SXF_MULTIPLYSPEED)
		TNT1 A 0 A_SetArg(0,args[0]+3)
		TNT1 A 0 A_JumpIf(args[0] < 18,"Spawn1")
		TNT1 A 0 A_SetArg(0,0)
        stop
    WindDown1:
        TNT1 A 0
        stop
    }
}


actor whirlwindStart 
{
PROJECTILE
+RIPPER
damagetype "whirlwind"
Obituary "$OB_WHIRLWIND"
damage (0)
height 5
radius 5
Speed 25
scale 5.5
XScale 7.0
states
{
Spawn:
TNT1 A 0
TNT1 A 0 A_GiveInventory("ProjectileCode",1)
TNT1 A 0 A_Jumpif(pitch > 8,"Death")
TNT1 A 0 A_setPitch(Pitch+1)
TNT1 A 0 A_setScale(ScaleX-0.5,ScaleY-0.5)
TNT1 A 0 A_SpawnItemEx("whirlwindStart",0,0,0,momx,momy,momz,0,SXF_ABSOLUTEMOMENTUM|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE)
TNT1 A 1 A_SpawnItemEx("whirlwindDamager",0,0,0,0,0,0,0,SXF_TRANSFERSCALE)
TNT1 A 0 A_SpawnItemEx("whirlwindEdgeFX2",0,0,0,0,0,0,0,SXF_TRANSFERSCALE)
Goto Death

Death:
TNT1 A 0
stop
}
}

actor whirlwindDamager : ProjectileBase
{
Speed 0
Damage (0)
radius 15
height 10
DamageType "whirlwind"
Obituary "$OB_WHIRLWIND"
scale 1.5
+RIPPER
+SERVERSIDEONLY
States
{
Spawn:
TNT1 A 0 
TNT1 A 1 A_Explode(45,64,0,0,64)
stop
}
}


actor whirlwindEdgeFX : BasicNOTClientside
{
scale 2.5
XScale 4.0
Alpha 0.6
ReactionTime 8
renderstyle "Translucent"
States
{
Spawn:
TNT1 A 0
TNT1 A 0 A_GiveInventory("ProjectileCode",1)
BASB U 1
Spawn2:
BASB U 1  A_CountDown
BASB U 0 A_Fadeout(0.3)
loop

Death:
TNT1 A 0
stop
}
}


actor whirlwindEdgeFX2 : whirlwindEdgeFX {ReactionTime 1 Alpha 1.0}

actor whirlwindSlashFX1 : BasicHelper
{
+MISSILE
+CLIENTSIDEONLY
reactiontime 4
var int user_angle;
States
{
Spawn:
TNT1 A 0
TNT1 A 0 A_GiveInventory("ProjectileCodeSyncTarget",1)
TNT1 A 0 A_SetUserVar("user_angle", 10)
SpawnLoop:
"####" B 0 A_SpawnItemEx("whirlwindEdgeFX", cos(pitch)*150, 0, 12-(sin(pitch)*150), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
"####" B 0 A_SpawnItemEx("whirlwindEdgeFX", cos(pitch)*125, 0, 12-(sin(pitch)*125), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
"####" B 0 A_SpawnItemEx("whirlwindEdgeFX", cos(pitch)*200, 0, 12-(sin(pitch)*200), 0, 0, 0, user_angle, SXF_TRANSFERTRANSLATION|SXF_TRANSFERPITCH)
TNT1 A 0 A_SetUserVar("user_angle", user_angle - 5)
TNT1 A 0 A_Countdown
loop
Death:
TNT1 A 0
stop
}
}


//[+]========================================================================[+]
//------------------------------|Cooldown Actors|------------------------------
//[+]========================================================================[+]
actor WhirlWindCooler : WatcherBase // Coolers are a type of watcher actor that handle weapon cooldowns
{
States
{
Spawn:
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"DeathTake")
TNT1 A 1
TNT1 A 0 A_TakeFromTarget("WhirlWindCooldownItem",1)
TNT1 A 0 A_JumpIfInTargetInventory("WhirlWindCooldownItem",1,"Spawn")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("AltCooldownFlag",99)
TNT1 A 0
stop
}
}

actor WhirlWindCooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Giveinventory("WhirlWindCooldownItem",140)
TNT1 A 0 A_Giveinventory("AltCooldownFlag")
TNT1 A 0 A_Spawnitemex("WhirlWindCooler")
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor WhirlWindCooldownItem : inventory
{
inventory.amount 1
inventory.maxamount 140
}