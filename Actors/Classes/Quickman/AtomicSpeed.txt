actor Ability2_Quickman : AbilityMasterBase
{
Weapon.AmmoUse2 1
Weapon.AmmoGive2 0
Inventory.Pickupmessage "$PU_MEGABUSTER"
Obituary "$OB_MEGABUSTER"
Tag "whatanicetag"
weapon.ammotype2 "BusterAmmo"
inventory.icon "BDASWI"
+WEAPON.ALLOW_WITH_RESPAWN_INVUL
States
{

Ready:
QUMN A 0 
"####" A 1
goto Fire

Select:
TNT1 A 0 ACS_NamedExecuteAlways("WepSpeedMod",0,1.2*FVM)
TNT1 AAAAAAAAAAAAAAAAAAAAAA 0 A_Raise
"####" B 1 A_Raise
Loop

Fire:
QUMN A 0 A_PlaySoundEx("weapon/watershieldburst", "Weapon")
QUMN A 0 A_GiveInventory("AtomicSpeedEvasion_On",1)
"####" ACACACAC 1
Goto AtomicSpeedLoop
AtomicSpeedLoop:
QUMN AC 2 A_TakeInventory("AtomicSpeedResource",2)
QUMN A 1 A_JumpIfInventory("AtomicSpeedResource", 1, "AtomicSpeedLoop")
goto AtomicSpeedEnd
AtomicSpeedEnd:
QUMN A 7 A_GiveInventory("AtomicSpeedEvasion_Off",1)
"####" A 1 A_TakeInventory("AtomicSpeedLevel",9)
"####" A 1 A_GiveInventory("AtomicSpeedCooldown")
"####" A 1 Offset(0,32)
"####" A 1 Offset(0,58)
"####" A 1 Offset(0,82)
"####" A 1 Offset(0,110)
"####" D 0 A_Jump(256,"End")
goto End

AltFire:
"####" C 1
End:
"####" C 1 A_TakeInventory("AbilityActiveFlag",9)
"####" C 0 
Goto End
}
}
//====

actor UseAbility2_Quickman : CustomInventory
{
states
{
Use:
WEA2 A 0 A_GiveInventory("AtomicSpeedAbility",1)
fail
}
}

actor AtomicSpeedAbility : CustomInventory
{
states
{
Pickup:
TNT1 A 0 
TNT1 A 0 A_JumpIfInventory("AtomicSpeedResource",35,"Pickup2")
goto Nope

Pickup2:
TNT1 A 0 A_JumpIfInventory("AtomicSpeedCooldownItem",1,"Nope")
TNT1 A 0 ACS_NamedExecuteAlways("RunClassAbility",0,2)
stop

Nope:
TNT1 A 0 ACS_Execute(979,0)
stop
}
}


//=================
// :blink:
//=================

actor AtomicSpeedResource : inventory
{
inventory.amount 1
inventory.maxamount 175 // up to 5 seconds worth of invulnerability
}

actor AtomicSpeed_Evade : PowerupGiver
{ 
+INVENTORY.AUTOACTIVATE
Powerup.Duration 175
powerup.type "EvasionState"
}

actor AtomicSpeedEvasion_On : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 1
loop
Pickup:
TNT1 A 1 A_ChangeFlag("Spectral",1)
TNT1 A 0 A_GiveInventory("AtomicSpeed_Evade")
TNT1 A 0 ACS_NamedExecuteAlways("DetectFlicker",0)

stop
}
}

actor AtomicSpeedEvasion_Off : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 1
loop
Pickup:
TNT1 A 1 A_ChangeFlag("Spectral",0)
TNT1 A 1 A_TakeInventory("EvasionState",9)
stop
}
}
//[+]========================================================================[+]
//------------------------------|Cooldown Actors|------------------------------
//[+]========================================================================[+]
actor AtomicSpeedCooler : WatcherBase // Coolers are a type of watcher actor that handle weapon cooldowns
{
States
{
Spawn:
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"DeathTake")
TNT1 A 1
TNT1 A 0 A_TakeFromTarget("AtomicSpeedCooldownItem",1)
TNT1 A 0 A_JumpIfInTargetInventory("AtomicSpeedCooldownItem",1,"Spawn")
Death:
DeathTake:
TNT1 A 0
stop
}
}

actor AtomicSpeedCooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Giveinventory("AtomicSpeedCooldownItem",175)
TNT1 A 0 A_Spawnitemex("AtomicSpeedCooler")
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor AtomicSpeedCooldownItem : inventory
{
inventory.amount 1
inventory.maxamount 175
}