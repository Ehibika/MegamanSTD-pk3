Const int DPSPD = 32;

actor Ability1_SparkMandrill : AbilityMasterBase
{
Weapon.AmmoUse2 1
Weapon.AmmoGive2 0
Inventory.Pickupmessage "$PU_MEGABUSTER"
Obituary "$OB_SparkMandrill"
Tag "Dash Punch Ability"
weapon.ammotype2 "AbilityAmmo"
inventory.icon "HARDSI"
+WEAPON.ALLOW_WITH_RESPAWN_INVUL
States
{

Ready:
SMHD A 0 
"####" A 1 //A_WeaponReady
goto Fire

Fire:
"####" A 0 A_PlaySoundEx("misc/quake","Weapon2")
"####" E 4 
"####" E 0 A_GiveInventory("DashSet_B")
"####" E 0 A_Quake(2,14,0,8,"none")
"####" E 0 A_GiveInventory("BreakDashCharge", 4)
Fire.DashLoop:
"####" F 0 A_ChangeVelocity(Cos(pitch)*DPSPD, 0, Momz,CVF_RELATIVE|CVF_REPLACE)
"####" FF 1 A_FireCustomMissile("DashPunch",0,0,0,0)
"####" W 0 A_TakeInventory("BreakDashCharge", 1)
"####" W 0 A_JumpIfInventory("BreakDashRecoil", 1, "Fire.DashLoopEnd")
"####" W 0 A_JumpIfInventory("BreakDashCharge", 1, "Fire.DashLoop")
Fire.DashLoopEnd:
"####" EEEE 2 A_ScaleVelocity(0.9)
"####" E 0 A_GiveInventory("DashSetOff")
"####" C 0 A_GiveInventory("DashPunchCooldown")
"####" C 0 A_GiveInventory("RefireBuffer")
"####" C 0 A_Jump(256,"End")
goto End

AltFire:
"####" A 1
End:
"####" A 1 A_TakeInventory("AbilityActiveFlag",9)
"####" C 0 
Goto End
}
}
//====

actor UseAbility1_SparkMandrill : CustomInventory
{
states
{
Use:
WEA2 A 0 A_GiveInventory("DashPunchAbility",1)
fail
}
}

actor DashPunchAbility : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("DashPunchCooldownItem",1,"Nope")
TNT1 A 0 ACS_NamedExecuteAlways("RunClassAbility",0,1)
stop

Nope:
TNT1 A 0 ACS_Execute(979,0)
stop
}
}
//=================
//=================

Actor DashPunchhitDelay : powerprotection
{
Powerup.duration 17
Damagefactor "DashPunch", 0
}

Actor DashPunchWallhitDelay : powerprotection
{
Powerup.duration 17
Damagefactor "DashPunchWall", 0
}

Const int DashPunch_RAD = 128;

actor DashPunch : FastProjectileBase
{
PROJECTILE
Radius 16
Height 25
scale 2.5
damage (80)
+HITTRACER
+SLIDESONWALLS
damagetype "DashPunch"
Obituary "$OB_DASHPUNCH"
speed 32
States
{
Spawn:
TNT1 A 0
AQBA L 0 A_GiveInventory("ProjectileCode",1)
MMFX A 1 
stop
XDeath:
//NAPA D 0 ACS_NamedExecuteWithResult("Save_Boom")
NAPA D 0 A_SpawnItemEx("WallCollision",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS)
TNT1 A 0 A_GiveToTarget("BreakDashRecoil", 1)
//NAPA D 0 A_RadiusGive("DrillHeadCannon_Knockback",DashPunch_RAD,RGF_PLAYERS)
stop
Death:
TNT1 A 0 A_GiveToTarget("BreakDashRecoil", 1)
TNT1 A 0 A_Quake(2,14,0,8,"none")
TNT1 A 1
stop
}
}

actor WallCollision : FastProjectileBase
{
PROJECTILE
Radius 5
Height 5
scale 2.5
damage (0)
+HITTRACER
damagetype "DashPunchWall"
Obituary "$OB_SOLIDSLAM"
speed 30
States
{
Spawn:
TNT1 A 0
Spawn.Loop:
TNT1 A 1 A_Warp(AAPTR_TRACER, 70, 0, 5, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USECALLERANGLE)
TNT1 A 0 A_SetArg(0,args[0]+1)
TNT1 A 1 a_JumpIf(args[0]<20,"Spawn.Loop")
stop
Death:
TMT1 A 1 A_Warp(AAPTR_TRACER, 0, 0, 5, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USECALLERANGLE)
TNT1 A 0 A_Explode(80,48,0, 0, 48)
TNT1 A 0 A_Quake(2,14,0,8,"none")
TNT1 A 0 A_PlaySoundEx("Misc/Bonk","Weapon2")
ASEX ABCDEF 2
stop
}
}

//[+]========================================================================[+]
//------------------------------|Cooldown Actors|------------------------------
//[+]========================================================================[+]
actor DashPunchCooler : WatcherBase // Coolers are a type of watcher actor that handle weapon cooldowns
{
States
{
Spawn:
TNT1 A 0 A_JumpIfInTargetInventory("CutterFlag",999,"DeathTake")
TNT1 A 1
TNT1 A 0 A_TakeFromTarget("DashPunchCooldownItem",1)
TNT1 A 0 A_JumpIfInTargetInventory("DashPunchCooldownItem",1,"Spawn")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("AltCooldownFlag",99)
TNT1 A 0
stop
}
}

actor DashPunchCooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Giveinventory("DashPunchCooldownItem",85)
TNT1 A 0 A_Giveinventory("AltCooldownFlag")
TNT1 A 0 A_Spawnitemex("DashPunchCooler")
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor DashPunchCooldownItem : inventory
{
inventory.amount 1
inventory.maxamount 85
}