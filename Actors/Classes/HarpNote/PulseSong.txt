actor Ability2_HarpNote : AbilityMasterBase
{
Weapon.AmmoUse2 1
Weapon.AmmoGive2 0
Inventory.Pickupmessage "$PU_MEGABUSTER"
Obituary "$OB_MEGABUSTER"
Tag "Dash Ability"
weapon.ammotype2 "AbilityAmmo"
inventory.icon "PLSNGI"
+WEAPON.ALLOW_WITH_RESPAWN_INVUL
States
{

Ready:
HPNT A 0 
"####" A 1 Offset(0,110)
"####" A 1 Offset(0,96)
"####" A 1 Offset(0,82)
"####" A 1 Offset(0,70)
"####" A 1 Offset(0,58)
"####" A 1 Offset(0,46)
"####" A 1 Offset(0,32)
Ready1:
HPNT A 1 A_WeaponReady
Goto Ready1

Deselect:
TNT1 A 0 A_TakeInventory("AbilityActiveFlag",9)
TNT1 AAAAAAAAAAAAAAAAAAAAAA 0 A_Lower
"####" B 1 A_Lower
Loop


Fire:
"####" A 0 A_PlaySoundEx("string/shot","SoundSlot6")
"####" A 0 A_FireCustomMissile("PulseSongShot",0,0,4,4,0,0)
"####" A 1 Offset(0,58)
"####" A 1 Offset(0,46)
"####" A 1 Offset(0,32)
"####" A 0 A_GiveInventory("PulseSongCooldown")
//"####" A 7 A_SpawnItemEX("PulseSongWatcher")
goto Fire.Finish

Fire.Finish:
"####" A 1 Offset(0,32)
"####" A 1 Offset(0,46)
"####" A 1 Offset(0,58)
"####" A 1 Offset(0,70)
"####" A 1 Offset(0,82)
"####" A 1 Offset(0,82)
"####" A 1 Offset(0,96)
"####" A 1 Offset(0,110)
"####" A 0 A_GiveInventory("RefireBuffer")
"####" A 0 A_Jump(256,"End")
goto End

NoAmmo:
"####" "#" 1
"####" "#" 0 A_Jump(256,"Ready1")
Goto Ready1

//AltFire:
//"####" A 1
End:
"####" A 1 A_TakeInventory("AbilityActiveFlag",9)
"####" A 0 
Goto End

}
}
//====

actor UseAbility2_HarpNote : CustomInventory
{
states
{
Use:
WEA2 A 0 A_GiveInventory("PulseSongAbility",1)
fail
}
}

actor PulseSongAbility : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_JumpIfInventory("PulseSongCooldownItem",1,"Nope")
TNT1 A 0 ACS_NamedExecuteAlways("RunClassAbility",0,2)
stop

Nope:
TNT1 A 0 ACS_Execute(979,0)
stop
}
}
//=================
//=================
Const int PulseSongAOE = 128;
Const int PulseSong_DMG = 10;

actor PulseSongShot : ProjectileBase
{
Obituary "$OB_PULSESONG"
DamageType "PulseSong"
Speed 64
Damage (0)
radius 3

MissileHeight 16
height 3
scale 2.5
Var Int User_TrailCount;
Var Int User_TP; //TrailPosition

reactiontime 20
States
{
Spawn:
TNT1 A 0 
AQBA L 0 A_GiveInventory("ProjectileCode",1)
Goto Spawn2
Spawn2:
TNT1 A 0 A_SpawnItemEx("PulseSongTrail",0,0,0,0,0,0,0,9)
Spawn3:
TNT1 A 0 A_CountDown
TNT1 A 1 
Goto Spawn2
Death:
TNT1 A 0 A_GiveInventory("ProjectileDCode",1)
TNT1 A 1 A_Spawnitemex("PulseSongExplosion",0,0,0,0,0,0,0,SXF_TRANSFERTRANSLATION)
stop
}
}

actor PulseSongTrail : BasicClientside
{
scale 2.5
renderstyle "Translucent"
Gravity 0.5
ReactionTime 8
States
{
Spawn:
TNT1 A 0
PULS ABC 1
Spawn2:
PULS C 0 A_SetScale(ScaleX+0.5)
PULS C 1 A_Fadeout
Loop
}
}

actor PulseSongExplosion : BasicExplosion //now just the FX due to desynch
{
scale 4.0
ReactionTime 10
States
{
Spawn:
MINB A 0
AQBA L 0 A_GiveInventory("ProjectileCode",1)
TNT1 A 1 A_PlaySoundEx("pulse/song", "Weapon")
Spawn2:
TNT1 A 0 A_Explode(PulseSong_DMG,PulseSongAOE,0,0,PulseSongAOE)
TNT1 A 7 A_Spawnitemex("PulseSongFX2",0,0,0,0,0,0,0,SXF_TRANSFERTRANSLATION)
TNT1 A 0 A_CountDown
loop
}
}

actor PulseSongWatcher : BasicHelper
{
    ReactionTime 17
    States
    {
    Spawn:
        TNT1 A 0
        TNT1 A 0 A_JumpIfInTargetInventory("isDead",1,"Death")
        TNT1 A 7 A_GiveToTarget("PulseSongPulseActor")
        TNT1 A 0 A_CountDown
        loop
    Death:
        TNT1 A 0 
        stop
    }
}


actor PulseSongPulseActor : CustomInventory
{
inventory.amount 1
inventory.maxamount 1
+AUTOACTIVATE
states
{
Spawn:
TNT1 A 1
loop
Use:
TNT1 A 0 A_SpawnItemEx("PulseSongFX",0,0,0,0,0,0,0,0)
TNT1 A 0 A_SpawnItemEx("PulseSongRingFX",0,0,0,0,0,0,0,0)
TNT1 A 0 A_SpawnItemEx("PulseSongDamager",0,0,0,0,0,0,0,0)
stop
}
}

actor PulseSongDamager : BasicExplosion 
{
scale 4.0
DamageType "PulseSong"
States
{
Spawn:
MINB A 0 
TNT1 L 0 A_GiveInventory("ProjectileCode",1)
//TNT1 A 0 A_Explode(PulseSong_DMG,PulseSongAOE,0,0,PulseSongAOE)
TNT1 A 1 ACS_NamedExecuteAlways("STD_RadiusGive",0,5,PulseSongAOE,RG_ENEMY)
TNT1 A 2
stop
}
}


actor PulseSongFX : BasicClientside
{
scale 3.0
Renderstyle "Translucent"
ReactionTime 35
speed 7
States
{
Spawn:
TNT1 A 0 
TNT1 A 0 acs_NamedExecuteWithResult("SprayerAlpha",0.5*FVM)
TNT1 A 1 A_Warp(AAPTR_TARGET,32,0,41,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
Spawn2:
PULS A 1 A_Warp(AAPTR_TARGET,32,0,41,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
PULS A 0 A_SetScale(ScaleX+0.5)
PULS A 0 A_CountDown
PULS A 0 A_JumpIf(ReactionTime <= 30,"Spawn3")
loop
Spawn3:
PULS B 1 A_Warp(AAPTR_TARGET,32,0,41,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
PULS B 0 A_SetScale(ScaleX+0.5)
PULS B 0 A_CountDown
PULS B 0 A_JumpIf(ReactionTime <= 25,"Spawn4")
loop
Spawn4:
PULS C 1 A_Warp(AAPTR_TARGET,32,0,41,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE)
PULS C 0 A_SetScale(ScaleX+0.5)
PULS C 0 A_CountDown
RFLC C 0 A_Fadeout
loop

Death:
RFLC B 0
stop
}
}

actor PulseSongFX2 : BasicClientside
{
scale 3.0
Renderstyle "Translucent"
ReactionTime 35
speed 7
States
{
Spawn:
TNT1 A 0 
Spawn2:
PULS A 1 
PULS A 0 A_SetScale(ScaleX+0.7)
PULS A 0 A_CountDown
PULS A 0 A_JumpIf(ReactionTime <= 30,"Spawn3")
loop
Spawn3:
PULS B 1 
PULS B 0 A_SetScale(ScaleX+0.7)
PULS B 0 A_CountDown
PULS B 0 A_JumpIf(ReactionTime <= 25,"Spawn4")
loop
Spawn4:
PULS C 1 
PULS C 0 A_SetScale(ScaleX+0.7)
PULS C 0 A_CountDown
RFLC C 0 A_Fadeout
loop

Death:
RFLC B 0
stop
}
}

actor RadiusGiveItem_5 : CustomInventory
{
States
{
Pickup:
TNT1 A 0
TNT1 A 0 A_GiveInventory("PulseSongNerfInitiate")
stop
Nope:
TNT1 A 0
Stop
}
}


actor PulseSongRingFX : BasicHelper
{
	reactiontime 15
	var int user_angle;
	+CLIENTSIDEONLY
	States
	{
		Spawn:
		TNT1 A 0
		TNT1 A 0 A_GiveInventory("ProjectileCodeSyncTarget",1)
		TNT1 A 1
		SpawnLoop:
		TNT1 A 0 A_SpawnItemEx("PulseSongRingFX1", PulseSongAOE, 0, 0, 4, 0, 0, user_angle, 1)
		TNT1 A 0 A_SpawnItemEx("PulseSongRingFX1", -PulseSongAOE, 0, 0, -4, 0, 0, user_angle, 1)
		TNT1 A 0 A_SetUserVar("user_angle", user_angle + 12)
		TNT1 A 0 A_Countdown
		loop
		Death:
		TNT1 A 0 
		stop
	}
}

actor PulseSongRingFX1 : BasicGraphicEffect
{
Scale 1.0
States
{
Spawn:
TNT1 A 0
DUOR T 2 
Spawn2:
DUOR T 2 A_FadeOut(0.3)
wait
}
}

const int Stat_UpS = 2;
const int Stat_DownS = -3;
const int Stat_X = 30;
const int Stat_UpZ = 10;
const int Stat_DownZ = 80;

actor PulseSongNerf : BasePowerDamage
{
Powerup.Duration -3
damagefactor "Normal", 0.9
}

actor PulseSongNerfInitiate : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Jumpifinventory("PulseSongNerf",1,"Sustain")
TNT1 A 0 A_PlaySoundEx("support/StatDown","SoundSlot7")
TNT1 A 0 A_GiveInventory("PulseSongNerf",1)
TNT1 A 0 A_SpawnItemEX("PulseSongNerfWatcher")
stop

Sustain:
TNT1 A 0 A_TakeInventory("PulseSongNerf",9)
TNT1 A 0 A_GiveInventory("PulseSongNerf",1)
stop
}
}


actor PulseSongNerfWatcher : BasicHelper 
{
Var int user_DashTime;
States
{
Spawn:
TNT1 A 0
TNT1 A 5 A_GiveToTarget("PowerDownFXSpawn")
TNT1 A 0 A_JumpIfInTargetInventory("PulseSongNerf",1,"Spawn")
TNT1 A 5
Goto Death

Death:
TNT1 A 0 
stop
}
}

actor PowerDownFXSpawn : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_SpawnItemEx("PowerDownFX",Stat_X,0,Stat_DownZ,0,0,Stat_DownS,random(0,360))
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor PowerDownFX 
{
PROJECTILE
+NOINTERACTION
+DONTBLAST
+CLIENTSIDEONLY
Speed 0
radius 5
height 5
scale 2.0
Renderstyle "Translucent"
Alpha 0.8
States
{
Spawn:
ICMS A 0
POWU CDCD 2
POWU CDCD 2 A_Fadeout
stop
Death:
TNT1 A 1
stop
}
}

//[+]========================================================================[+]
//------------------------------|Cooldown Actors|------------------------------
//[+]========================================================================[+]
actor PulseSongCooler : WatcherBase // Coolers are a type of watcher actor that handle weapon cooldowns
{
States
{
Spawn:
TNT1 A 0 A_JumpIfInTargetInventory("isDead",1,"DeathTake")
TNT1 A 1
TNT1 A 0 A_TakeFromTarget("PulseSongCooldownItem",1)
TNT1 A 0 A_JumpIfInTargetInventory("PulseSongCooldownItem",1,"Spawn")
Death:
DeathTake:
TNT1 A 0 A_TakeFromTarget("AltCooldownFlag",99)
TNT1 A 0
stop
}
}

actor PulseSongCooldown : CustomInventory
{
inventory.amount 1
Inventory.MaxAmount 100
+AUTOACTIVATE
States
{
Spawn:
TNT1 A 0
stop
Pickup:
TNT1 A 0 A_Giveinventory("PulseSongCooldownItem",525)
TNT1 A 0 A_Giveinventory("AltCooldownFlag")
TNT1 A 0 A_Spawnitemex("PulseSongCooler")
stop
Nope:
//BUST B 0 A_PlaySoundEx("weapon/heat3","Item")
TNT1 A 0
stop
}
}

actor PulseSongCooldownItem : inventory
{
inventory.amount 1
inventory.maxamount 525
}
